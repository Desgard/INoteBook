{"version":3,"sources":["../src/language-detection.js"],"names":[],"mappings":";AACA;;;;;QAGgB,uB,GAAA,uB;QAyBA,yB,GAAA,yB;QAqBA,O,GAAA,O;AAhDhB,IAAM,OAAO,QAAQ,MAAR,CAAb;AACA,IAAM,eAAe,QAAQ,cAAR,CAArB;AACO,SAAS,uBAAT,CAAiC,QAAjC,EAA2C;AAC9C,QAAI,sBAAJ;AACA,aAAS,OAAT,CAAiB,mBAAW;AACxB,YAAM,gBAAgB,cAAc,IAAd,CAAmB,OAAnB,CAAtB;AACA,YAAI,iBAAiB,IAArB,EAA2B;AACvB;AACH;AACD,YAAM,YAAY,cAAc,CAAd,CAAlB;AACA,YAAI,CAAC,SAAL,EAAgB;AACZ;AACH;AACD,eAAO,IAAP,CAAY,YAAZ,EAA0B,IAA1B,CAA+B,mBAAW;AACtC,gBAAM,UAAU,aAAa,OAAb,EAAsB,SAAtB,CAAhB;AACA,gBAAI,cAAc,OAAlB,EAA2B;AACvB,gCAAgB,OAAhB;AACH;AACJ,SALD;;AAOA,YAAI,kBAAkB,SAAtB,EAAiC;AAC7B,4BAAgB,SAAhB;AACH;AACJ,KAnBD;AAoBA,WAAO,aAAP;AACH;;AAEM,SAAS,yBAAT,CAAmC,GAAnC,EAAwC;AAC3C,QAAI,gBAAJ;AACA,WAAO,IAAP,CAAY,YAAZ,EAA0B,IAA1B,CAA+B,mBAAW;AACtC,YAAM,aAAa,aAAa,OAAb,EAAsB,YAAtB,CAAnB;;;;;;AAMA,YAAI,CAAC,UAAL,EAAiB;AACb,mBAAO,KAAP;AACH;AACD,eAAO,WAAW,IAAX,CAAgB,qBAAa;AAChC,gBAAI,QAAQ,SAAZ,EAAuB;AACnB,0BAAU,aAAa,OAAb,EAAsB,SAAtB,CAAV;AACH;AACJ,SAJM,CAAP;AAKH,KAfD;AAgBA,WAAO,OAAP;AACH;;AAEM,SAAS,OAAT,CAAiB,QAAjB,EAA2B,QAA3B,EAAqC;AACxC,QAAM,OAAO,wBAAwB,QAAxB,CAAb;AACA,QAAI,IAAJ,EAAU;AACN,eAAO,IAAP;AACH;AACD,QAAM,MAAM,KAAK,OAAL,CAAa,QAAb,CAAZ;AACA,WAAO,0BAA0B,GAA1B,KAAkC,GAAzC;AACH","file":"language-detection.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nconst path = require('path');\nconst language_map = require('language-map');\nexport function lookupLanguageByAceMode(commands) {\n    let resultAceMode;\n    commands.forEach(command => {\n        const matchAceModes = /lang\\-(.+)/g.exec(command);\n        if (matchAceModes == null) {\n            return\n        }\n        const matchLang = matchAceModes[1];\n        if (!matchLang) {\n            return;\n        }\n        Object.keys(language_map).some(langKey => {\n            const aceMode = language_map[langKey][\"aceMode\"];\n            if (matchLang === aceMode) {\n                resultAceMode = aceMode;\n            }\n        });\n        // not found the `matchLang` in AceMode\n        if (resultAceMode === undefined) {\n            resultAceMode = matchLang;\n        }\n    });\n    return resultAceMode;\n}\n\nexport function lookupLanguageByExtension(ext) {\n    let aceMode;\n    Object.keys(language_map).some(langKey => {\n        const extensions = language_map[langKey][\"extensions\"];\n        /* TODO: These lang has not extensions\n         Ant Build System\n         Isabelle ROOT\n         Maven POMAnt Build System\n         */\n        if (!extensions) {\n            return false;\n        }\n        return extensions.some(extension => {\n            if (ext === extension) {\n                aceMode = language_map[langKey][\"aceMode\"];\n            }\n        });\n    });\n    return aceMode;\n}\n\nexport function getLang(commands, filePath) {\n    const lang = lookupLanguageByAceMode(commands);\n    if (lang) {\n        return lang;\n    }\n    const ext = path.extname(filePath);\n    return lookupLanguageByExtension(ext) || ext;\n}"]}